{
	"info": {
		"_postman_id": "7c4b29c2-b04b-45d4-89bc-c6dcfe8d3614",
		"name": "March24_APITesters_Team28_E2E_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33176374",
		"_collection_link": "https://cloudy-comet-810968.postman.co/workspace/Team-Workspace~61eda759-ceb1-4121-8230-c85dc7e78a87/collection/33075155-7c4b29c2-b04b-45d4-89bc-c6dcfe8d3614?action=share&source=collection_link&creator=33176374"
	},
	"item": [
		{
			"name": "User Login Controller",
			"item": [
				{
					"name": "UserLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.expect(jsonData).to.have.property('token'); \r",
									"    var token = jsonData.token; \r",
									"    pm.globals.set(\"token\", token);\r",
									"    console.log(\"Token value\", token);\r",
									"   \r",
									"\r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Not valid credentials\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Not valid credentials\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]); \r",
									"    });\r",
									"}\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"      else if (pm.response.code === 500){\r",
									"        pm.response.to.have.status(\"Internal Server Error\");\r",
									"      }\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// \r\n{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/login",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "UserLogin",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"{{userEmailId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUri}}/logi",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"logi"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710008522&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Px2vjBizKxcvz0MGtnkCd%2BHB%2FFDBrIJDIvVtztK1Zy0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710008522&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Px2vjBizKxcvz0MGtnkCd%2BHB%2FFDBrIJDIvVtztK1Zy0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:22:02 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T18:22:02.990+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/logi\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Program Module",
			"item": [
				{
					"name": "Create Program Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"console.log(response);\r",
									"pm.globals.set(\"programId\",response.programId);\r",
									"//pm.globals.set(\"programName\",response.programName);\r",
									"pm.globals.set(\"programPayload1\",JSON.stringify(response));\r",
									"\r",
									"//-------------------------------------------\r",
									"// status code validation\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"//    pm.globals.set(\"programId\",response.programId);\r",
									"// pm.globals.set(\"programPayload1\",JSON.stringify(response));\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"pm.globals.set(\"programId\",response.programId);\r",
									"pm.globals.set(\"programPayload1\",JSON.stringify(response));\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"   // postman.setNextRequest(\"All Programs\");\r",
									"});}\r",
									"postman.setNextRequest(\"All Programs\");\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"   //postman.setNextRequest(\"All Programs\");\r",
									"});}\r",
									"postman.setNextRequest(\"All Programs\");\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"postman.setNextRequest(\"All Programs\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"    \r",
									"});}\r",
									"}\r",
									"//------------------------------------------------------------\r",
									"\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//schema validation\r",
									"var schema_validation={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_validation)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"       \r",
									"     if(jsonData.programDescription!==null){\r",
									"    pm.expect(jsonData.programDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
									"    \r",
									"    if(jsonData.programName!==null){\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");}\r",
									"    });\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    //pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\": \"{{programDescription_post}}\",\r\n\"programName\": \"{{programName_post}}{{$randomInt}}\",\r\n\"programStatus\": \"{{programStatus_post}}\"\r\n\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/saveprogram",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Program 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"console.log(response);\r",
									"pm.globals.set(\"programName\",response.programName);\r",
									"pm.globals.set(\"programPayload2\",JSON.stringify(response));\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"   // postman.setNextRequest(\"All Programs\");\r",
									"});}\r",
									"postman.setNextRequest(\"All Programs\");\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"   //postman.setNextRequest(\"All Programs\");\r",
									"});}\r",
									"postman.setNextRequest(\"All Programs\");\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"        pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"    }\r",
									"    \r",
									"postman.setNextRequest(\"All Programs\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"    \r",
									"});}\r",
									"}\r",
									"//------------------------------------------------------------\r",
									"\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription_post}}\",\r\n  \"programName\": \"{{programName_post}}{{$randomInt}}\",\r\n  \"programStatus\": \"{{programStatus_post}}\"\r\n  \r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/saveprogram",
							"protocol": "https",
							"host": [
								"lms-marchapi-hackathon-a258d2bbd43b",
								"herokuapp",
								"com"
							],
							"path": [
								"lms",
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "program By Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var putPayload=JSON.parse(pm.globals.get(\"programPayload2\"));\r",
									"\r",
									"var programStatus = [\"Active\", \"InActive\"];\r",
									"var programStatus = programStatus[Math.floor(Math.random() * programStatus.length)];\r",
									"\r",
									"var programDescription = \"SMPO\";\r",
									"var programName = \"March24-APITesters-SMPO-\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"putPayload.programStatus=programStatus;\r",
									"putPayload.programDescription=programDescription;\r",
									"putPayload.programName=programName;\r",
									"pm.globals.set(\"programPayload2\",JSON.stringify(putPayload));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"programId\", jsonData.programId);\r",
									"pm.globals.set(\"programName\",jsonData.programName);\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"programId\", jsonData.programId);\r",
									"pm.globals.set(\"programName\",jsonData.programName);\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503,501]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{programPayload2}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/program/{{programName}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var putPayload=JSON.parse(pm.globals.get(\"programPayload1\"));\r",
									"\r",
									"// var programDes = \"PostmanHackathon\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// var programName = \"March24-APITesters-SDET-\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"// var programStatus = \"active\";\r",
									"// pm.globals.get(\"variable_key\");\r",
									"// putPayload.programDescription=programDes;\r",
									"// putPayload.programName=programName;\r",
									"// putPayload.programStatus=programStatus;\r",
									"// pm.globals.set(\"programPayload1\",JSON.stringify(putPayload));\r",
									"\r",
									"var putPayload=JSON.parse(pm.globals.get(\"programPayload1\"));\r",
									"\r",
									"var programStatus = [\"Active\", \"InActive\"];\r",
									"var programStatus = programStatus[Math.floor(Math.random() * programStatus.length)];\r",
									"\r",
									"var programDescription = \"SMPO\";\r",
									"var programName = \"March24-APITesters-SMPO-\"+pm.variables.replaceIn('{{$randomInt}}');\r",
									"putPayload.programStatus=programStatus;\r",
									"putPayload.programDescription=programDescription;\r",
									"putPayload.programName=programName;\r",
									"pm.globals.set(\"programPayload1\",JSON.stringify(putPayload));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"programId\", jsonData.programId);\r",
									"pm.globals.set(\"programName\",jsonData.programName);\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"programId\", jsonData.programId);\r",
									"pm.globals.set(\"programName\",jsonData.programName);\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503,501]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{programPayload1}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/putprogram/{{programId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/programs/{{programId}}",
							"protocol": "https",
							"host": [
								"lms-marchapi-hackathon-a258d2bbd43b",
								"herokuapp",
								"com"
							],
							"path": [
								"lms",
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"     \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/allPrograms",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"allPrograms"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Programs with Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"     \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/allProgramsWithUsers",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"allProgramsWithUsers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Program Batch Module",
			"item": [
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" \r",
									" \r",
									" pm.test(\"The data is:    batchDescription: \"+pm.variables.get(\"batchDescription\")+\", batchName: \"+data.batchName_post+\", batchNoOfClasses: \"+pm.variables.get(\"batchNoOfClasses\")+\", batchStatus: \"+data.batchStatus_post+\", programId: \"+pm.globals.get(\"programId\"), function () {\r",
									"        \r",
									"    });\r",
									"\r",
									"\r",
									"//Validate the Status code\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"batchId\", jsonData.batchId);\r",
									"    pm.globals.set(\"batchName\",jsonData.batchName);\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"batchId\", jsonData.batchId);\r",
									"pm.globals.set(\"batchName\",jsonData.batchName);\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" postman.setNextRequest(\"Get all Batch Details\");\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" postman.setNextRequest(\"Get all Batch Details\");\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" postman.setNextRequest(\"Get all Batch Details\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" postman.setNextRequest(\"Get all Batch Details\");\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"status code: \"+jsonData.status,()=>{\r",
									"    console.log(\"Status is: \",jsonData.status);\r",
									"});\r",
									"\r",
									"pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"\r",
									"pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"\r",
									"pm.test(\"path: \"+jsonData.path,()=>{\r",
									"    console.log(\"Path is: \",jsonData.path);\r",
									"});\r",
									"*/\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"Ok\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"};\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"       \r",
									"     if(jsonData.batchDescription!==null){\r",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
									"    \r",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    if(jsonData.programName!==null){\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");}\r",
									"    });\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    //pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var batchDescriptionArray = [\"This is SDET batch\", \"This is DA batch\", \"This is Developers batch\",\"This is SMPO batch\"];\r",
									"\r",
									"pm.variables.set('batchDescriptionValue',batchDescriptionArray);\r",
									"\r",
									"pm.variables.set(\"batchDescription\", batchDescriptionArray[Math.floor(Math.random() * batchDescriptionArray.length)]);\r",
									"\r",
									"var batchNoOfClasses=[10,11,12,13,14,15,16,17,19,19,20];\r",
									"pm.variables.set('batchNoOfClasses',batchNoOfClasses);\r",
									"\r",
									"pm.variables.set(\"batchNoOfClasses\", batchNoOfClasses[Math.floor(Math.random() * batchNoOfClasses.length)]);\r",
									"\r",
									"console.log(pm.variables.get(\"batchDescription\"));\r",
									"console.log(pm.variables.get(\"batchNoOfClasses\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\":\"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName_post}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus_post}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/batches",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch By Batch_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var batchDescriptionArray = [\"It's SDET batch2\", \"It's DA batch2\", \"It's Developers batch2\",\"It's SMPO batch2\"];\r",
									"\r",
									"pm.variables.set('batchDescriptionValue',batchDescriptionArray);\r",
									"\r",
									"pm.variables.set(\"batchDescription\", batchDescriptionArray[Math.floor(Math.random() * batchDescriptionArray.length)]);\r",
									"\r",
									"var batchNoOfClasses=[20,22,23,24,25,26,27,28,29,30,31,32,33,34,35];\r",
									"pm.variables.set('batchNoOfClasses',batchNoOfClasses);\r",
									"\r",
									"pm.variables.set(\"batchNoOfClasses\", batchNoOfClasses[Math.floor(Math.random() * batchNoOfClasses.length)]);\r",
									"\r",
									"console.log(pm.variables.get(\"batchDescription\"));\r",
									"console.log(pm.variables.get(\"batchNoOfClasses\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The data is:    batchDescription: \"+data.batchDescription_put+\", batchName: \"+data.batchName_put+\", batchNoOfClasses: \"+data.batchNoOfClasses_put+\", batchStatus: \"+data.batchStatus_put+\", programId: \"+pm.globals.get(\"programId\")+\" ,programName: \"+data.programName_put, function () {\r",
									"        \r",
									"    });\r",
									"\r",
									"\r",
									"//Validate the Status code\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"batchId\", jsonData.batchId);\r",
									"pm.globals.set(\"batchName\",jsonData.batchName);\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.globals.set(\"batchId\", jsonData.batchId);\r",
									"pm.globals.set(\"batchName\",jsonData.batchName);\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"status code: \"+jsonData.status,()=>{\r",
									"    console.log(\"Status is: \",jsonData.status);\r",
									"});\r",
									"\r",
									"pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"\r",
									"pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"\r",
									"pm.test(\"path: \"+jsonData.path,()=>{\r",
									"    console.log(\"Path is: \",jsonData.path);\r",
									"});\r",
									"*/\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"};\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"       \r",
									"     if(jsonData.batchDescription!==null){\r",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
									"    \r",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    if(jsonData.programName!==null){\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");}\r",
									"    });\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    //pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription_put}}\",\r\n  \"batchName\": \"{{batchName_put}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses_put}},\r\n  \"batchStatus\": \"{{batchStatus_put}}\",\r\n   \"programId\":\"{{programId}}\",\r\n  \"programName\": \"{{programName_put}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/batches/{{batchId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch By Batch_ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"      pm.test(\"Verify the data value\", function () {\r",
									"        pm.expect(jsonData.batchId).to.equal(pm.globals.get(\"batchId\"));\r",
									"    });\r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"};\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"    let jsonData1 = pm.response.json();\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData1).to.be.an(\"object\");\r",
									"  // console.log(\"Response array length is: \",jsonData1.length);\r",
									"    if(jsonData1.batchDescription!==null){\r",
									"   pm.expect(jsonData.batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.batchId).to.be.a(\"number\");\r",
									"    if(jsonData1.batchName!==null){\r",
									"    pm.expect(jsonData1.batchName).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.batchNoOfClasses).to.be.a(\"number\");\r",
									"    if(jsonData1.batchStatus!==null){\r",
									"    pm.expect(jsonData1.batchStatus).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.programId).to.be.a(\"number\");\r",
									"    if(jsonData1.programName!==null){\r",
									"    pm.expect(jsonData1.programName).to.be.a(\"string\");}\r",
									"});\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    //pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/batches/batchId/{{batchId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{batchId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Batch By missing Batch_ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/batches/batchId/",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"batches",
										"batchId",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709916105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KJQBlYQDe6r1uDdFgaEtaiJr9YaC6VHcfsDr9O5sC08%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709916105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KJQBlYQDe6r1uDdFgaEtaiJr9YaC6VHcfsDr9O5sC08%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 16:41:45 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-08T16:41:45.616+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
						},
						{
							"name": "Get Batch By non-existing Batch_ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/batches/batchId/2345555566",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"batches",
										"batchId",
										"2345555566"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709916210&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZDk4BZxwTOKkShW%2FFHASDzKJH8XV6LMkEpnfvPsxpJg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709916210&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZDk4BZxwTOKkShW%2FFHASDzKJH8XV6LMkEpnfvPsxpJg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 16:43:30 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-08T16:43:30.910+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/lms/batches/batchId/2345555566\"\n}"
						},
						{
							"name": "Alphanumerics in Batch_ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/batches/batchId/asddsfb",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"batches",
										"batchId",
										"asddsfb"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709916280&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2neBs%2BoLSiIZ0W9uJk4C0sMaXd9u%2FNgwpwj0AKDeleo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709916280&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2neBs%2BoLSiIZ0W9uJk4C0sMaXd9u%2FNgwpwj0AKDeleo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 16:44:40 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-08T16:44:40.457+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/lms/batches/batchId/asddsfb\"\n}"
						},
						{
							"name": "Special chars in Batch_ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/batches/batchId/@$&345",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"batches",
										"batchId",
										"@$&345"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709916333&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=i5YjRCYefSbGqoK85%2FmsftohLZY0NJBcOE7Nt%2F%2Bnmt8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709916333&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=i5YjRCYefSbGqoK85%2FmsftohLZY0NJBcOE7Nt%2F%2Bnmt8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 16:45:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-08T16:45:33.369+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/lms/batches/batchId/@$&345\"\n}"
						}
					]
				},
				{
					"name": "Get Batch by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"   \r",
									"        pm.test(\"Verify the data value\", function () {\r",
									"        pm.expect(jsonData.batchName).to.equal(pm.globals.get(\"batchName\"));\r",
									"    }); \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"status code: \"+jsonData.status,()=>{\r",
									"    console.log(\"Status is: \",jsonData.status);\r",
									"});\r",
									"\r",
									"pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"\r",
									"pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"\r",
									"pm.test(\"path: \"+jsonData.path,()=>{\r",
									"    console.log(\"Path is: \",jsonData.path);\r",
									"});\r",
									"*/\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"var schema2={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"var schema1={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"};\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"    let jsonData1 = pm.response.json();\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"     if(Array.isArray(jsonData1))\r",
									"    {\r",
									"        pm.expect(tv4.validate(jsonData1,schema2)).to.be.true;\r",
									"    }\r",
									"    else{\r",
									"            pm.expect(tv4.validate(jsonData1,schema1)).to.be.true;\r",
									"    }\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    if(Array.isArray(jsonData1)){\r",
									"        console.log(\"Respose array length...\",jsonData1.length);\r",
									"    for(i=0;i<jsonData1.length;i++){\r",
									"        if(jsonData1[i].batchDescription!==null){\r",
									"   pm.expect(jsonData1[i].batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].batchId).to.be.a(\"number\");\r",
									"    if(jsonData1[i].batchName!==null){\r",
									"    pm.expect(jsonData1[i].batchName).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].batchNoOfClasses).to.be.a(\"number\");\r",
									"    if(jsonData1[i].batchStatus!==null){\r",
									"    pm.expect(jsonData1[i].batchStatus).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].programId).to.be.a(\"number\");\r",
									"    if(jsonData1[i].programName!==null){\r",
									"    pm.expect(jsonData1[i].programName).to.be.a(\"string\");}\r",
									"}}else{\r",
									"    if(jsonData1.batchDescription!==null){\r",
									"   pm.expect(jsonData1.batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.batchId).to.be.a(\"number\");\r",
									"    if(jsonData1.batchName!==null){\r",
									"    pm.expect(jsonData1.batchName).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.batchNoOfClasses).to.be.a(\"number\");\r",
									"    if(jsonData1.batchStatus!==null){\r",
									"    pm.expect(jsonData1.batchStatus).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.programId).to.be.a(\"number\");\r",
									"    if(jsonData1.programName!==null){\r",
									"    pm.expect(jsonData1.programName).to.be.a(\"string\");}\r",
									"}});\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"   });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/batches/batchName/{{batchName}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{batchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch By Program_ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"         \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"          \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"var schema2={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"var schema1={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"};\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"    let jsonData1 = pm.response.json();\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"     if(Array.isArray(jsonData1))\r",
									"    {\r",
									"        pm.expect(tv4.validate(jsonData1,schema2)).to.be.true;\r",
									"    }\r",
									"    else{\r",
									"            pm.expect(tv4.validate(jsonData1,schema1)).to.be.true;\r",
									"    }\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    if(Array.isArray(jsonData1)){\r",
									"        console.log(\"Respose array length...\",jsonData1.length);\r",
									"    for(i=0;i<jsonData1.length;i++){\r",
									"        if(jsonData1[i].batchDescription!==null){\r",
									"   pm.expect(jsonData1[i].batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].batchId).to.be.a(\"number\");\r",
									"    if(jsonData1[i].batchName!==null){\r",
									"    pm.expect(jsonData1[i].batchName).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].batchNoOfClasses).to.be.a(\"number\");\r",
									"    if(jsonData1[i].batchStatus!==null){\r",
									"    pm.expect(jsonData1[i].batchStatus).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].programId).to.be.a(\"number\");\r",
									"    if(jsonData1[i].programName!==null){\r",
									"    pm.expect(jsonData1[i].programName).to.be.a(\"string\");}\r",
									"}}else{\r",
									"    if(jsonData1.batchDescription!==null){\r",
									"   pm.expect(jsonData1.batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.batchId).to.be.a(\"number\");\r",
									"    if(jsonData1.batchName!==null){\r",
									"    pm.expect(jsonData1.batchName).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.batchNoOfClasses).to.be.a(\"number\");\r",
									"    if(jsonData1.batchStatus!==null){\r",
									"    pm.expect(jsonData1.batchStatus).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1.programId).to.be.a(\"number\");\r",
									"    if(jsonData1.programName!==null){\r",
									"    pm.expect(jsonData1.programName).to.be.a(\"string\");}\r",
									"}});\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    //pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/batches/program/{{programId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"batches",
								"program",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batch Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"     \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"if(pm.response.code === 200||pm.response.code === 201){\r",
									"    let jsonData1 = pm.response.json();\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData1).to.be.an(\"array\");\r",
									"   console.log(\"Response array length is: \",jsonData1.length);\r",
									"    for(i=0;i<jsonData1.length;i++){\r",
									"     if(jsonData1[i].batchDescription!==null){\r",
									"   pm.expect(jsonData[i].batchDescription).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].batchId).to.be.a(\"number\");\r",
									"    if(jsonData1[i].batchName!==null){\r",
									"    pm.expect(jsonData1[i].batchName).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].batchNoOfClasses).to.be.a(\"number\");\r",
									"    if(jsonData1[i].batchStatus!==null){\r",
									"    pm.expect(jsonData1[i].batchStatus).to.be.a(\"string\");}\r",
									"    pm.expect(jsonData1[i].programId).to.be.a(\"number\");\r",
									"    if(jsonData1[i].programName!==null){\r",
									"    pm.expect(jsonData1[i].programName).to.be.a(\"string\");}\r",
									"}});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/batches",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Module",
			"item": [
				{
					"name": "CreateUserWithRole E2E",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate status code\r",
									"if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('userId');\r",
									"    var userId = jsonData.userId;\r",
									"    pm.globals.set(\"UserId\", userId);\r",
									"    console.log(\"User ID value\", userId);\r",
									"    var roleId = jsonData.roleId;\r",
									"    pm.globals.set(\"roleId\", roleId);\r",
									"    console.log(\"roleId value\", roleId);\r",
									"    var firstName = jsonData.userFirstName;\r",
									"    firstName = firstName + \" Updated\";\r",
									"    console.log(\"First Name value\", firstName);\r",
									"    pm.globals.set(\"firstName\", firstName);\r",
									"    var lastName = jsonData.userLastName;\r",
									"    lastName = lastName + \" Updated\";\r",
									"    console.log(\"Last Name value\", lastName);\r",
									"    pm.globals.set(\"lastName\", lastName);\r",
									"\r",
									"\r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Not valid credentials\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"     postman.setNextRequest(\"GetAllUsers\");\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Not valid credentials\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    postman.setNextRequest(\"GetAllUsers\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 400, 401,404,501]);\r",
									"    });\r",
									"    postman.setNextRequest(\"GetAllUsers\");\r",
									"}\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \", () => {\r",
									"    if (pm.response.code === 201) {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    }\r",
									"    else if (pm.response.code === 200) {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    }\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    }\r",
									"    else if (pm.response.code === 404) {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    }\r",
									"    else if (pm.response.code === 400) {\r",
									"        pm.response.to.have.status(\"Bad Request\");\r",
									"    }\r",
									"    else if (pm.response.code === 500) {\r",
									"        pm.response.to.have.status(\"Internal Server Error\");\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.collectionVariables.set(\"loginStatus\", data[\"userLogin\"]['loginStatus']);\r",
									"// pm.collectionVariables.set(\"password\", data[\"userLogin\"]['password']);\r",
									"// pm.collectionVariables.set(\"status\", data[\"userLogin\"]['status']);\r",
									"// pm.collectionVariables.set(\"userLoginEmail\", data[\"userLogin\"]['userLoginEmail']);\r",
									"// pm.collectionVariables.set(\"roleIds\", data[\"userLogin\"]['roleIds']);\r",
									"\r",
									"\r",
									"// pm.collectionVariables.set(\"roleId\", data[\"userRoleMaps\"]['roleId']);\r",
									"// pm.collectionVariables.set(\"userRoleStatus\", data[\"userRoleMaps\"]['userRoleStatus']);\r",
									"// //console.log(pm.collectionVariables.messageDetails);\r",
									"// // If the variable is saved in array notation, you can parse the string to construct an array.\r",
									"// // If you want to use a collection variable, you can use the get method to retreive it\r",
									"// // and assign the value to a variable in the Postman sandbox.\r",
									"// let retrievedId = pm.collectionVariables.get(\"roleId\", data[\"userRoleMaps\"]['roleId']);\r",
									"// console.log(\"retrievedId=\", retrievedId);\r",
									"// Get rolepermission data (currently stored as string)\r",
									"\r",
									"\r",
									"/*\r",
									"var roles = pm.iterationData.get(\"userRoleMaps\");\r",
									"console.log(\"roles=\", roles);\r",
									"pm.collectionVariables.set(\"roleId\", roles[0].roleId);\r",
									"pm.collectionVariables.set(\"userRoleStatus\", roles[0].userRoleStatus);\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments1}}\",\r\n  \"userEduPg\": \"{{userEduPg1}}\",\r\n  \"userEduUg\": \"{{userEduUg1}}\",\r\n  \"userFirstName\": \"{{userFirstName1}}\",\r\n  \"userLastName\": \"{{userLastName1}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl1}}\",\r\n  \"userLocation\": \"{{userLocation1}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus1}}\",\r\n    \"password\": \"{{password1}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail1}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName1}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber1}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/users/roleStatus",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating the status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"   // let jsonData = pm.response.json(); \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"   // let jsonData = pm.response.json(); \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"let varData=pm.response.text();\r",
									"  console.log(varData);\r",
									"\r",
									"//response header is present\r",
									"pm.test(\"content_Type is present\" , () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									" \r",
									" // reponse header having particular name\r",
									"pm.test(\"content-Type header is application/json\" , () =>{ \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"//validating status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"Ok\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validating JSON field in response\r",
									"//let jsonData = pm.response.json();\r",
									"pm.test(\"The updated user \" , () =>{\r",
									"    pm.expect(jsonData.userFirstName).to.eql(pm.iterationData.get(\"Fname\"));\r",
									"    pm.expect(jsonData.userLastName).to.eql(pm.iterationData.get(\"Lname\"));\r",
									"    pm.expect(jsonData.userMiddleName).to.eql(pm.iterationData.get(\"Mname\"));\r",
									"    pm.expect(jsonData.userPhoneNumber).to.eql(pm.iterationData.get(\"PhnNum\"));\r",
									"    pm.expect(jsonData.userLocation).to.eql(pm.iterationData.get(\"ULocation\"));\r",
									"    pm.expect(jsonData.userTimeZone).to.eql(pm.iterationData.get(\"TmZone\"));\r",
									"    pm.expect(jsonData.userLinkedinUrl).to.eql(pm.iterationData.get(\"ULinkedinUrl\"));\r",
									"    pm.expect(jsonData.userEduPg).to.eql(pm.iterationData.get(\"EduPg\"));\r",
									"    pm.expect(jsonData.userEduUg).to.eql(pm.iterationData.get(\"EduUg\"));\r",
									"    pm.expect(jsonData.userVisaStatus).to.eql(pm.iterationData.get(\"uVisaStatus\"));\r",
									"    pm.expect(jsonData.userLoginEmail).to.eql(pm.iterationData.get(\"uLoginEmail\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"userComments\": \"{{UserCmts}}\",\r\n  \"userEduPg\": \"{{EduPg}}\",\r\n  \"userEduUg\": \"{{EduUg}}\",\r\n  \"userFirstName\": \"{{Fname}}\",\r\n  \"userLastName\": \"{{Lname}}\",\r\n \"userMiddleName\": \"{{Mname}}\",\r\n  \"userLinkedinUrl\": \"{{ULinkedinUrl}}\",\r\n  \"userLocation\": \"{{ULocation}}\",\r\n   \"userPhoneNumber\":{{PhnNum}},\r\n  \"userTimeZone\": \"{{TmZone}}\",\r\n  \"userVisaStatus\": \"{{uVisaStatus}}\",\r\n  \"userLoginEmail\": \"{{uLoginEmail}}\"\r\n  \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/users/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating Status code\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"      \r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"//validating status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"Ok\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									" //reponse header having particular name\r",
									"pm.test(\"content-Type header is application/json\" , () =>{ \r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"//validation data\r",
									"\r",
									"  let varData=pm.response.text();\r",
									"  console.log(varData);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{\r\n  \"roleId\": \"{{RID}}\",\r\n  \"userRoleStatus\": \"{{URStatus}}\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/users/roleStatus/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update roleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating Status code\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"   \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"   pm.globals.set(\"UserId\",jsonData.userId);    \r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"//validating status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"Ok\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"pm.test(\"content_Type is present\" , () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									" \r",
									"//  // reponse header having particular name\r",
									"// pm.test(\"content-Type header is application/json\" , () =>{ \r",
									"//     pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"// });\r",
									"\r",
									"let varData=pm.response.text();\r",
									"  console.log(varData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"userRoleList\": [\r\n    \"{{Rolid}}\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/users/roleId/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"roleId",
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update  User Role Program Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    //let jsonData = pm.response.json(); \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    //let jsonData = pm.response.json(); \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"     if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"     if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"     if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									"}\r",
									"let varData=pm.response.text();\r",
									"  console.log(varData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"programId\": {{programId}},\r\n  \"roleId\": \"{{ID}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId}},\r\n      \"userRoleProgramBatchStatus\": \"{{USTATUS}}\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/users/roleProgramBatchStatus/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update userLogin status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//Validating the status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    //let jsonData = pm.response.json(); \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    //let jsonData = pm.response.json(); \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"let varData=pm.response.text();\r",
									"  console.log(varData);\r",
									"  \r",
									"//validating the header\r",
									"pm.test(\"content-Type header is application/json\" , () =>{ \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});\r",
									"\r",
									"// const jsonData = pm.response.json();\r",
									"// pm.test(\"The updated login status\" , () =>{\r",
									"//     pm.expect(jsonData.loginStatus).to.eql(pm.iterationData.get(\"LoginStatus\"));\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"{{loGinStatus}}\",\r\n  \"password\": \"{{PassWord}}\",\r\n  \"roleIds\": [\r\n    \"{{rolID}}\"                         \r\n  ],\r\n  \"status\": \"{{UStatus}}\",\r\n  \"userLoginEmail\": \"{{UEmail}}\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUri}}/users/userLogin/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByUserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"{{UserId}}"
							]
						}
					},
					"response": [
						{
							"name": "GetUserByInvalidUserID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/users/U28989",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"users",
										"U28989"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710111355&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tNlpKI4zLMnQVIdFnN3kPmzwDxlCUFky01uY%2FNr1Fhc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710111355&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tNlpKI4zLMnQVIdFnN3kPmzwDxlCUFky01uY%2FNr1Fhc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 22:55:55 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"User not found with Id : U28989 \",\n    \"success\": false\n}"
						}
					]
				},
				{
					"name": "GetCountActInact",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/byStatus",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "Id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "GetCountsA&IWithInput",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/users/byStatus?roleId=R02",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"users",
										"byStatus"
									],
									"query": [
										{
											"key": "roleId",
											"value": "R02"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710111455&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=JdICB6o3Jx2NqFpwx8RfwERSfXIGgT3Pv3jsJDn9dhs%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710111455&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=JdICB6o3Jx2NqFpwx8RfwERSfXIGgT3Pv3jsJDn9dhs%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 22:57:34 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"status\": \"Inactive\",\n        \"count\": 54\n    },\n    {\n        \"status\": \"InActive\",\n        \"count\": 22\n    },\n    {\n        \"status\": \"inactive\",\n        \"count\": 9\n    },\n    {\n        \"status\": \"ACTIVE\",\n        \"count\": 24\n    },\n    {\n        \"status\": \"active\",\n        \"count\": 187\n    },\n    {\n        \"status\": \"inActive\",\n        \"count\": 1\n    },\n    {\n        \"status\": \"Active\",\n        \"count\": 1473\n    }\n]"
						}
					]
				},
				{
					"name": "GetUserByProgramBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/programBatch/{{batchId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/programs/{{programId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsersWithRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/roles/{{roleId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"roles",
								"{{roleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsersWithRoleID_V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/v2/users",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetActiveUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/activeUsers",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"activeUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllUserWithRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users/roles",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"     \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/users",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code\r",
									"let jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"     pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"R01\");\r",
									"});\r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/roles",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Role Program Batch Map Controller",
			"item": [
				{
					"name": "Get assigned batches/program of all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  '$schema': 'http://json-schema.org/draft-04/schema#',\r",
									"  'type': 'array',\r",
									"  'items': {\r",
									"    type: 'object',\r",
									"    properties: {\r",
									"      userId: { type: 'string' },\r",
									"      roleId: { type: 'string' },\r",
									"      programId: { type: 'number' },\r",
									"      batchId: { type: 'number' },\r",
									"      userRoleProgramBatchStatus: { type: 'string' }\r",
									"    },\r",
									"    required: [\r",
									"      'userId',\r",
									"      'roleId',\r",
									"      'programId',\r",
									"      'batchId',\r",
									"      'userRoleProgramBatchStatus'\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"\r",
									"if(pm.response.code === 200){\r",
									"    let jsonData1 = pm.response.json();\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData1).to.be.an(\"array\");\r",
									"   console.log(\"Response array length is: \",jsonData1.length);\r",
									"    for(i=0;i<jsonData1.length;i++){\r",
									"     if(jsonData1[i].userId!==null){\r",
									"   pm.expect(jsonData[i].userId).to.be.a(\"string\");}\r",
									"   if(jsonData1[i].roleId!==null){\r",
									"    pm.expect(jsonData1[i].roleId).to.be.a(\"string\");}\r",
									"    if(jsonData1[i].programId!==null){\r",
									"    pm.expect(jsonData1[i].programId).to.be.a(\"number\");}\r",
									"    if(jsonData1[i].batchId!==null){\r",
									"    pm.expect(jsonData1[i].batchId).to.be.a(\"number\");}\r",
									"    if(jsonData1[i].userRoleProgramBatchStatus!==null){\r",
									"    pm.expect(jsonData1[i].userRoleProgramBatchStatus).to.be.a(\"string\");}\r",
									"}});\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    let jsonData = pm.response.json(); \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    let jsonData = pm.response.json(); \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"//Validate status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/userRoleProgramBatchMap",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": [
						{
							"name": "Get assigned batches/program of all users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/userRoleProgramBatch",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"userRoleProgramBatch"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709954062&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZhxIJtMVC9CiWdYzFBhjk6HTUNT3Oe2qb0B0p5Mh7II%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709954062&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZhxIJtMVC9CiWdYzFBhjk6HTUNT3Oe2qb0B0p5Mh7II%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 03:14:22 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T03:14:22.907+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/userRoleProgramBatch\"\n}"
						},
						{
							"name": "Get assigned batches/program of all users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}",
									"host": [
										"{{BaseUri}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710008797&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=qdFRp4vPCWsQJ1gn23chhuxRgluxo1iZHdp8Pz20Mxg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710008797&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=qdFRp4vPCWsQJ1gn23chhuxRgluxo1iZHdp8Pz20Mxg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:26:37 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T18:26:37.304+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/\"\n}"
						},
						{
							"name": "Get assigned batches/program of all users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/userRoleProgramBatchMap",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"userRoleProgramBatchMap"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710008847&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=UwWEQ4CmcuQyZPawEkuzOt1M%2FrkpUIVr7ROH8GRquc8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710008847&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=UwWEQ4CmcuQyZPawEkuzOt1M%2FrkpUIVr7ROH8GRquc8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:27:27 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T18:27:27.094+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/lms/userRoleProgramBatchMap\"\n}"
						}
					]
				},
				{
					"name": "Get user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  '$schema': 'http://json-schema.org/draft-04/schema#',\r",
									"  'type': 'array',\r",
									"  'items': {\r",
									"    type: 'object',\r",
									"    properties: {\r",
									"      userId: { type: 'string' },\r",
									"      roleId: { type: 'string' },\r",
									"      programId: { type: 'number' },\r",
									"      batchId: { type: 'number' },\r",
									"      userRoleProgramBatchStatus: { type: 'string' }\r",
									"    },\r",
									"    required: [\r",
									"      'userId',\r",
									"      'roleId',\r",
									"      'programId',\r",
									"      'batchId',\r",
									"      'userRoleProgramBatchStatus'\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"\r",
									"if(pm.response.code === 200){\r",
									"    let jsonData1 = pm.response.json();\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"}); \r",
									"//Validate the Data Type\r",
									"pm.test(\"Validate Data Type of the response\",()=>{\r",
									"    pm.expect(jsonData1).to.be.an(\"array\");\r",
									"   console.log(\"Response array length is: \",jsonData1.length);\r",
									"    for(i=0;i<jsonData1.length;i++){\r",
									"     if(jsonData1[i].userId!==null){\r",
									"   pm.expect(jsonData[i].userId).to.be.a(\"string\");}\r",
									"   if(jsonData1[i].roleId!==null){\r",
									"    pm.expect(jsonData1[i].roleId).to.be.a(\"string\");}\r",
									"    if(jsonData1[i].programId!==null){\r",
									"    pm.expect(jsonData1[i].programId).to.be.a(\"number\");}\r",
									"    if(jsonData1[i].batchId!==null){\r",
									"    pm.expect(jsonData1[i].batchId).to.be.a(\"number\");}\r",
									"    if(jsonData1[i].userRoleProgramBatchStatus!==null){\r",
									"    pm.expect(jsonData1[i].userRoleProgramBatchStatus).to.be.a(\"string\");}\r",
									"}});\r",
									"}else\r",
									"{\r",
									"    pm.test(\"Schema is Invalid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"});\r",
									"}\r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    let jsonData = pm.response.json(); \r",
									"       \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    let jsonData = pm.response.json(); \r",
									"       \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});\r",
									"}\r",
									"\r",
									"//Validate status line\r",
									"pm.test(\"Validate Status line. \",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"       pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 500) {\r",
									"     pm.response.to.have.status(\"Internal Server Error\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  }\r",
									"});\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUri}}/userRoleProgramBatchMap/{{UserId}}",
							"host": [
								"{{BaseUri}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{UserId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get user by userId",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/userRoleProgramBatchMap/U2",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"U2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710009248&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0Su5vRXmNaOamNAgjllKE9QFsLdBPlsvyMxlZl%2BbKbU%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710009248&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0Su5vRXmNaOamNAgjllKE9QFsLdBPlsvyMxlZl%2BbKbU%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:34:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"UserRoleProgramBatchMap not found with Id : U2 \",\n    \"success\": false\n}"
						},
						{
							"name": "Get user by userId",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/userRoleProgramBatchM",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"userRoleProgramBatchM"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710009314&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Q%2BYGWbZNxqN%2BrZLCawIQ0gJJWUTEjNPsyMM4QQTRbrc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710009314&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Q%2BYGWbZNxqN%2BrZLCawIQ0gJJWUTEjNPsyMM4QQTRbrc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:35:14 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T18:35:14.256+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/userRoleProgramBatchM\"\n}"
						},
						{
							"name": "Get user by userId",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}",
									"host": [
										"{{BaseUri}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710009325&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=nVxp7wVhLnapwfoUuanEKs9sPBVf0vZ0lveLduN05%2Fc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710009325&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=nVxp7wVhLnapwfoUuanEKs9sPBVf0vZ0lveLduN05%2Fc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:35:25 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T18:35:25.657+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/\"\n}"
						},
						{
							"name": "Get user by userId",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/userRoleProgramBatchMap/U25",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"U25"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710009378&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=CKpGyDWnokMszOLP1lwqrJ1dmlFrJ6%2FkUJfEC%2BZSbYY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710009378&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=CKpGyDWnokMszOLP1lwqrJ1dmlFrJ6%2FkUJfEC%2BZSbYY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 09 Mar 2024 18:36:18 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-03-09T18:36:18.076+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/lms/userRoleProgramBatchMap/U25\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "TEARDOWN Copy",
			"item": [
				{
					"name": "DELETE Program Module",
					"item": [
						{
							"name": "Program By name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"}else if (pm.response.code === 201) {\r",
											"    pm.test(\"Verify the expected status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"       \r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Validate status code 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Validate status code 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"}else if (pm.response.code === 404) {\r",
											"    pm.test(\"Validate Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"   \r",
											"} else {\r",
											"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
											"    });\r",
											"}\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\"Validate Status line. \",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"       pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorized\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 500) {\r",
											"     pm.response.to.have.status(\"Internal Server Error\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  }\r",
											"});\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/deletebyprogname/{{programName}}",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"deletebyprogname",
										"{{programName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Program By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"}else if (pm.response.code === 201) {\r",
											"    pm.test(\"Verify the expected status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"       \r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Validate status code 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Validate status code 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"}else if (pm.response.code === 404) {\r",
											"    pm.test(\"Validate Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"   \r",
											"} else {\r",
											"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
											"    });\r",
											"}\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\"Validate Status line. \",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"       pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorized\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 500) {\r",
											"     pm.response.to.have.status(\"Internal Server Error\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  }\r",
											"});\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/deletebyprogid/{{programId}}",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"deletebyprogid",
										"{{programId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE Program Batch Module",
					"item": [
						{
							"name": "Delete Batch By Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"}else if (pm.response.code === 201) {\r",
											"    pm.test(\"Verify the expected status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"       \r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Validate status code 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Validate status code 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"}else if (pm.response.code === 404) {\r",
											"    pm.test(\"Validate Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"   \r",
											"} else {\r",
											"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
											"    });\r",
											"}\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\"Validate Status line. \",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"       pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorized\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 500) {\r",
											"     pm.response.to.have.status(\"Internal Server Error\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  }\r",
											"});\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/batches/{{batchId}}",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE User Role Program Batch Map Controller Module",
					"item": [
						{
							"name": "DeleteUserRoleProgramBatchMap",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"}else if (pm.response.code === 201) {\r",
											"    pm.test(\"Verify the expected status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"       \r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Validate status code 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Validate status code 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"}else if (pm.response.code === 404) {\r",
											"    pm.test(\"Validate Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"   \r",
											"} else {\r",
											"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
											"    });\r",
											"}\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\"Validate Status line. \",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"       pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorized\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 500) {\r",
											"     pm.response.to.have.status(\"Internal Server Error\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  }\r",
											"});\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/userRoleProgramBatchMap/deleteAll/{{UserId}}",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"deleteAll",
										"{{UserId}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUri}}/userRoleProgramBatchMap/deleteAll/U2",
											"host": [
												"{{BaseUri}}"
											],
											"path": [
												"userRoleProgramBatchMap",
												"deleteAll",
												"U2"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710009588&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=k%2BvYkTPOXsn0OJS7UwYQEFYzZ4W%2B7nQ4WlZbWomCEao%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710009588&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=k%2BvYkTPOXsn0OJS7UwYQEFYzZ4W%2B7nQ4WlZbWomCEao%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 09 Mar 2024 18:39:48 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"UserRoleProgramBatchMap not found with id : U2 \",\n    \"success\": false\n}"
								},
								{
									"name": "New Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUri}}/userRoleProgramBatchMa",
											"host": [
												"{{BaseUri}}"
											],
											"path": [
												"userRoleProgramBatchMa"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710009854&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=urzorfemJBv1l7RvO1SGCra2jNzTA5yQ9CMBI9T7hPI%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710009854&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=urzorfemJBv1l7RvO1SGCra2jNzTA5yQ9CMBI9T7hPI%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 09 Mar 2024 18:44:14 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2024-03-09T18:44:14.461+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/userRoleProgramBatchMa\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "DELETE User Module",
					"item": [
						{
							"name": "DeleteUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"}else if (pm.response.code === 201) {\r",
											"    pm.test(\"Verify the expected status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"       \r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Validate status code 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Validate status code 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"}else if (pm.response.code === 404) {\r",
											"    pm.test(\"Validate Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"   \r",
											"} else {\r",
											"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
											"    });\r",
											"}\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\"Validate Status line. \",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"       pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorized\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 500) {\r",
											"     pm.response.to.have.status(\"Internal Server Error\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  }\r",
											"});\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/html;charset=utf-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUri}} /users/{{UserId}}",
									"host": [
										"{{BaseUri}} "
									],
									"path": [
										"users",
										"{{UserId}}"
									]
								}
							},
							"response": [
								{
									"name": "DeleteUser with invalid userID",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUri}} /users/M123",
											"host": [
												"{{BaseUri}} "
											],
											"path": [
												"users",
												"M123"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710108701&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1FO23wHyZ505jyP0wDtwDbirO3ChpRK3Z7EUywHe5dg%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710108701&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1FO23wHyZ505jyP0wDtwDbirO3ChpRK3Z7EUywHe5dg%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Sun, 10 Mar 2024 22:11:41 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1><script defer src=\"https://static.cloudflareinsights.com/beacon.min.js/v84a3a4012de94ce1a686ba8c167c359c1696973893317\" integrity=\"sha512-euoFGowhlaLqXsPWQ48qSkBSCFs3DPRyiwVu3FjR96cMPx+Fr+gpWRhIafcHwqwCqWS42RZhIudOvEI+Ckf6MA==\" data-cf-beacon='{\"rayId\":\"8626a45508ca39f0\",\"version\":\"2024.2.4\",\"token\":\"08a46637120a404a963395dd86986b4f\"}' crossorigin=\"anonymous\"></script></body></html>"
								}
							]
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "UserLogout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate status code \r",
											"if (pm.response.code === 200) {\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											"//Validate response body message\r",
											" pm.test(\"Body matches string\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Logout successful\");\r",
											" });\r",
											"\r",
											"}else if (pm.response.code === 201) {\r",
											"    pm.test(\"Verify the expected status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"       \r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Validate status code 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Validate status code 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"}else if (pm.response.code === 404) {\r",
											"    pm.test(\"Validate Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"   \r",
											"} else {\r",
											"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
											"    });\r",
											"}\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\"Validate Status line. \",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"       pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorized\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 500) {\r",
											"     pm.response.to.have.status(\"Internal Server Error\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  }\r",
											"});\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUri}}/logoutlms",
									"host": [
										"{{BaseUri}}"
									],
									"path": [
										"logoutlms"
									]
								}
							},
							"response": [
								{
									"name": "UserLogut",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUri}}/logoutlm",
											"host": [
												"{{BaseUri}}"
											],
											"path": [
												"logoutlm"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710008427&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=BguePL4xTgf5pe4ZoD7fxl1LLAVlaC3AOTTaFdTnY7U%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710008427&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=BguePL4xTgf5pe4ZoD7fxl1LLAVlaC3AOTTaFdTnY7U%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 09 Mar 2024 18:20:27 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2024-03-09T18:20:27.764+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/logoutlm\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MTAwODkxNDYsImV4cCI6MTcxMDExNzk0Nn0.Feu_yKLrm4UtL0g3uDBPVAXaeICvY5xQKcrnwoZKmjrqaOd7wMS17-6wEIkuBmc_NaD1Ce-d0MOrFtiXjD8AIg",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}